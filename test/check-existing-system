#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

from anacondalib import VirtInstallMachineCase
from installer import Installer
from operating_systems import WindowsOS
from progress import Progress
from review import Review
from storage import Storage
from testlib import nondestructive, test_main  # pylint: disable=import-error
from utils import get_pretty_name


@nondestructive
class TestExistingSystemFedora(VirtInstallMachineCase):
    disk_image = "fedora-rawhide"

    def testScenarioEraseAll(self):
        b = self.browser
        m = self.machine

        i = Installer(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.REVIEW)

        for device in ["vda1", "vda2", "vda3", "vda4"]:
            r.check_disk_row("vda", parent=device, action="delete")

        r.check_deleted_system("Fedora Linux")

class TestExistingSystemDebian(VirtInstallMachineCase):
    disk_image = "debian-stable"
    disk_size = 20

    def install(self):
        b = self.browser
        m = self.machine

        i = Installer(b, m)
        p = Progress(b)

        i.begin_installation(button_text="Install")
        with b.wait_timeout(300):
            p.wait_done()

        self.handleReboot()

    def verifyDualBoot(self):
        m = self.machine

        # Expect the new OS is the default grub entry
        pretty_name = get_pretty_name(m)
        self.assertIn("Fedora Linux", pretty_name)
        # Select second OS grub entry
        self.selectBootMenuEntry(2)
        m.reboot()
        pretty_name = get_pretty_name(m)
        self.assertIn("Debian GNU/Linux", pretty_name)

    def testScenarioUseFreeSpace(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_partitioning("use-free-space")
        i.next()
        s.check_encryption_selected(False)
        i.reach(i.steps.REVIEW)

        self.install()
        self.verifyDualBoot()

    def testReclaimSpaceShrink(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_partitioning("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        s.reclaim_shrink_device("vda1", "5", "10.6", rowIndex=3)
        s.reclaim_modal_submit()

        i.reach(i.steps.REVIEW)
        r.check_disk_row("vda", parent="vda1", size="5.00 GB", action="resized from 10.6 GB")
        # FIXME: uncomment when https://github.com/storaged-project/blivet/pull/1256 is released
        # r.check_resized_system("Debian", ["vda1"])

        self.install()
        self.verifyDualBoot()

@nondestructive
class TestExistingSystemWindows(VirtInstallMachineCase):
    disk_size = 20

    def setUp(self):
        super().setUp()
        WindowsOS(machine=self.machine, browser=self.browser).partition_disk()

    def testScenarioEraseAll(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.REVIEW)

        for device in ["vda1", "vda2", "vda3", "vda4"]:
            r.check_disk_row("vda", parent=device, action="delete")

        r.check_deleted_system("Windows")


class TestExistingSystemUbuntu(VirtInstallMachineCase):
    disk_image = "ubuntu-stable"

    @nondestructive
    def testReclaimSpaceShrink(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_partitioning("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)

        s.reclaim_shrink_device("vda1", "7", "11.3", rowIndex=3)
        s.reclaim_modal_submit()

        i.reach(i.steps.REVIEW)
        r.check_disk_row("vda", parent="vda1", size="7.00 GB", action="resized from 11.3 GB")
        r.check_resized_system("Ubuntu", ["vda1"])


if __name__ == '__main__':
    test_main()
