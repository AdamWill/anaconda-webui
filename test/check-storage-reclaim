#!/usr/bin/python3
#
# Copyright (C) 2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import anacondalib
from installer import Installer
from review import Review
from storage import Storage
from storagelib import StorageCase
from testlib import (
    nondestructive,
    test_main,
)


@nondestructive
class TestStorageUseFreeSpaceScenario(anacondalib.VirtInstallMachineCase, StorageCase):

    def testReclaimSpaceOptional(self):
        # When there is enough free space for the installation
        # the reclaim action is not set by default

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        disk = "/dev/vda"
        dev = "vda"
        btrfsname = "btrfstest"
        s.partition_disk(
            disk,
            [
                ("1MB", "biosboot"),
                ("1GB", "ext4"),
                ("5GB", "btrfs", "-f", "-L", btrfsname + "A"),
            ]
        )

        s.udevadm_settle()

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()

        s.set_partitioning("use-free-space")
        s.reclaim_check_checkbox(False, False)

        s.reclaim_set_checkbox(True)
        i.next(True)

        # Test cancelled reclaim is not taking effect
        s.reclaim_remove_device("vda2")
        s.reclaim_check_action_present("vda2", "delete", True)
        s.reclaim_modal_cancel()

        # Continue without reclaiming space
        s.reclaim_check_checkbox(True, False)
        s.reclaim_set_checkbox(False)

        i.reach(i.steps.REVIEW)

        r.check_disk_row(dev, "/", "vda5, LVM", "8.59 GB", True, "xfs")

    def testReclaimSpaceDeleteBtrfsSubvolumes(self):
        # When there is not enough free space for the installation
        # the reclaim action is selected and disabled

        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        disk = "/dev/vda"
        dev = "vda"
        btrfsname = "btrfstest"
        s.partition_disk(
            disk,
            [
                ("1MB", "biosboot"),
                ("1GB", "ext4"),
                ("5GB", "btrfs", "-f", "-L", btrfsname + "A"),
                ("", "btrfs", "-f", "-L", btrfsname + "B")
            ]
        )

        s.udevadm_settle()

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()

        s.set_partitioning("use-free-space")
        s.reclaim_check_checkbox(True, True)
        i.next(True)

        s.reclaim_check_available_space("1.03 MB")

        # Check that all partitions are present
        s.reclaim_check_device_row("vda (0x", disk, "disk", "16.1 GB")
        s.reclaim_check_device_row("vda1", "", "partition", "1.05 MB")
        s.reclaim_check_device_row("vda2", "", "partition", "1.07 GB")
        s.reclaim_check_device_row("vda3", "", "partition", "5.37 GB")
        s.reclaim_check_device_row("vda4", "", "partition", "9.66 GB")

        # Check that deleting a disk will delete all contained partitions
        s.reclaim_remove_device("vda (0x")
        for device in ["vda1", "vda2", "vda3"]:
            s.reclaim_check_action_present(device, "delete")

        s.reclaim_check_available_space("16.1 GB")

        # Undo disk device deletion
        s.reclaim_undo_action("vda (0x")
        for device in ["vda1", "vda2", "vda3"]:
            s.reclaim_check_action_present(device, "delete", False)

        s.reclaim_check_available_space("1.03 MB")

        # Remove one partition and allocate enough space for the installation
        s.reclaim_remove_device("vda4")
        s.reclaim_check_action_present("vda4", "delete", True)
        s.reclaim_check_available_space("9.66 GB")

        # Check that deleting a parent disk which contains partitions marked for deletion
        # correctly calculates the available space
        s.reclaim_remove_device("vda (0x")
        s.reclaim_check_available_space("16.1 GB")
        s.reclaim_undo_action("vda (0x")
        s.reclaim_check_available_space("9.66 GB")

        s.reclaim_modal_submit()
        i.reach(i.steps.REVIEW)

        r.check_disk_row(dev, parent="vda4", action="delete")

    def testReclaimSpaceShrinkBtrfsSubvolumes(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        disk = "/dev/vda"
        dev = "vda"
        btrfsname = "btrfstest"
        s.partition_disk(
            disk,
            [
                ("1MB", "biosboot"),
                ("4GB", "ext4"),
                ("5GB", "btrfs", "-f", "-L", btrfsname + "A"),
                ("", "btrfs", "-f", "-L", btrfsname + "B")
            ]
        )

        s.udevadm_settle()

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.rescan_disks()

        s.set_partitioning("use-free-space")
        i.next(True)

        s.reclaim_check_available_space("1.03 MB")

        # Check that shrinking action is only available for partitions
        s.reclaim_check_action_button_present("vda (0x", "shrink", False)
        for device in ["vda2"]:
            s.reclaim_check_action_button_present(device, "shrink", True)

        for device in ["vda3", "vda4"]:
            # Shrinking Btrfs partitions is not yet supported by blivet:
            # https://bugzilla.redhat.com/show_bug.cgi?id=962143
            s.reclaim_check_action_button_present(device, "shrink", True, True)

        # Shrink a partition
        s.reclaim_shrink_device("vda2", "1", "4.29")
        s.reclaim_check_available_space("3.30 GB")

        # Undo the shrink actions
        for device in ["vda2"]:
            s.reclaim_undo_action(device)
            s.reclaim_check_action_present(device, "shrink", False)

        s.reclaim_check_available_space("1.03 MB")

        # Shrink one partition and allocate enough space for the installation
        s.reclaim_shrink_device("vda2", "1", "4.29")

        s.reclaim_modal_submit()
        i.reach(i.steps.REVIEW)

        r.check_disk_row(dev, parent="vda2", action="shrink")


@nondestructive
class TestStorageUseFreeSpaceScenarioExistingSystemFedora(anacondalib.VirtInstallMachineCase, StorageCase):
    disk_image = "fedora-rawhide"

    def testDeletePartition(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)
        r = Review(b, m)

        i.open()
        i.reach(i.steps.INSTALLATION_METHOD)
        s.set_partitioning("use-free-space")
        s.reclaim_set_checkbox(True)
        i.next(True)
        s.reclaim_remove_device("vda4")
        s.reclaim_modal_submit()

        i.reach(i.steps.REVIEW)
        r.check_affected_system("Fedora Linux", [("vda4", ["home", "root", "var"])])


if __name__ == '__main__':
    test_main()
